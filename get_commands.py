#!/usr/bin/python
import json
import rados
import sys
from itertools import groupby

PY2 = False

def run_command(cluster_handle, cmd):
    return cluster_handle.mon_command(json.dumps(cmd), b'', timeout=5)

header="""'''
This file is automatically generated.

Do not modify.
'''
import sys
import functools
import warnings
import json

if sys.version_info > (3, 0):
    from typing import List, overload


def deprecated(func):
    @functools.wraps(func)
    def new_func(*args, **kwargs):
        warnings.simplefilter('always', DeprecationWarning)  # turn off filter
        warnings.warn("Call to deprecated function {}.".format(func.__name__),
                      category=DeprecationWarning,
                      stacklevel=2)
        warnings.simplefilter('default', DeprecationWarning)  # reset filter
        return func(*args, **kwargs)
    return new_func


class MonCommandApi(object):
    def __init__(self, cluster):
        self._cluster = cluster

    def _mon_command(self, cmd, inbuf=b'', target=None):
        return self._cluster.mon_command(json.dumps(cmd), inbuf=inbuf, target=target)"""

func_template = '''
def {}({}):
    """
    {}
{}
    module={} perm={} flags={}
    """
    prefix = '{}'
    _args = {{'prefix': prefix, {}}}
    return self._mon_command(_args)
'''

footer = """

if __name__ == '__main__':
    import rados
    cluster = rados.Rados(conffile=sys.argv[1])
    cluster.connect()
    print(getattr(MonCommandApi(cluster), sys.argv[2])(*sys.argv[3:]))
"""
def indent(s):
    return '\n'.join(' '*4 + l for l in s.splitlines())

def comment(s):
    return '\n'.join('# ' + l for l in s.splitlines())


class Flags:
    NOFORWARD = (1 << 0)
    OBSOLETE = (1 << 1)
    DEPRECATED = (1 << 2)
    MGR = (1<<3)
    POLL = (1 << 4)
    HIDDEN = (1 << 5)

    VALS = {
        NOFORWARD: 'no_forward',
        OBSOLETE: 'obsolete',
        DEPRECATED: 'deprecated',
        MGR: 'mgr',
        POLL: 'poll',
        HIDDEN: 'hidden',
    }

    def __init__(self, fs):
        self.fs = fs

    def __contains__(self, other):
        return other in str(self)

    def __str__(self):
        keys = Flags.VALS.keys()
        es = {Flags.VALS[k] for k in keys if self.fs & k == k}
        return ', '.join(es)



class Param(object):
    t = {
        'CephInt': 'int',
        'CephString': 'str',
        'CephChoices': 'str',
        'CephPgid': 'str',
        'CephOsdName': 'str',
        'CephPoolname': 'str',
        'CephObjectname': 'str',
        'CephUUID': 'str',
        'CephEntityAddr': 'str',
        'CephIPAddr': 'str',
        'CephName': 'str',
        'CephBool': 'bool',
        'CephFloat': 'float',
    }


    def __init__(self, type, name, who=None, n=None, req=True, **kwargs):
        self.type = type
        self.name = name
        self.who = who
        self.n = n
        self.req = req != 'false'
        self.kwargs = kwargs

    def safe_name(self):
        unsafe = ['from', 'class', 'id']
        return self.name + '_' if self.name in unsafe else self.name

    def help(self):
        return '    :param {}: {} who={} req={} {}'.format(self.safe_name(), self.type, self.who, self.req, str(self.kwargs))

    def mk_default(self):
        if not self.req:
            return '=None'
        return ''

    def mk_type(self):
        if PY2:
            return ''
        inner = Param.t[self.type]
        return ': List[{}]'.format(inner) if self.n == 'N' else ': '  + inner

    def mk_dict(self):
        return "'{}': {}".format(self.name, self.safe_name())

    def __str__(self):
        return '{}{}{}'.format(self.safe_name(), self.mk_type(), self.mk_default())

class FuncSig(object):
    def __init__(self, sig, help, module, perm, flags):
        self.sig = [s for s in sig if isinstance(s, basestring)]
        self.params = sorted([Param(**s) for s in sig if not isinstance(s, basestring)], key=lambda p: p.req, reverse=True)
        self.help = help
        self.module = module
        self.perm = perm
        self.flags = Flags(flags)
        self.needs_overload = False

    def name(self):
        return '_'.join([e.replace('-', '_') for e in self.sig])

    def prefix(self):
        return ' '.join(self.sig)

    def mk_params(self):
        if self.params:
            return 'self, ' + ', '.join([str(p) for p in self.params])
        else:
            return 'self'

    def mk_param_help(self):
        return '\n'.join([f.help() for f in self.params])

    def mk_mk_dict(self):
        return ', '.join([p.mk_dict() for p in self.params])

    def __str__(self):
        out = func_template.format(self.name(), self.mk_params(), self.help, self.mk_param_help(), self.module, self.perm, str(self.flags), self.prefix(), self.mk_mk_dict())
        if self.needs_overload:
            out = '\n@overload  # Python 3 only' + out
        if 'deprecated' in self.flags or 'obsolete' in self.flags:
            out = '\n@deprecated' + out
        if self.needs_overload and PY2:
            out = comment(out)
        return out


def set_overload(funcs):
    for k, g in groupby(funcs, key=lambda f: f.name()):
        g = list(g)
        if len(g) > 1:
            for f in g:
                f.needs_overload = True

def mk_sigs(cluster):
    all = json.loads(run_command(cluster, {"prefix": "get_command_descriptions"})[1])
    #print(all)
    sigs = [FuncSig(**e[1]) for e in all.items()]
    sigs = sorted(sigs, key=lambda f: f.sig)
    set_overload(sigs)

    print(header)
    print('\n'.join([indent(str(s)) for s in sigs]))
    print(footer)

def main(conf, py_ver='3'):
    cluster = rados.Rados(conffile=conf)
    cluster.connect()
    global PY2
    PY2 = py_ver == '2'
    mk_sigs(cluster)

if __name__ == '__main__':
    main(*sys.argv[1:])
